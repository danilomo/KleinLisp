// ----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Oct 05 15:07:57 CEST 2024
// ----------------------------------------------------

package net.sourceforge.kleinlisp.parser;

import java.util.function.Consumer;
import net.sourceforge.kleinlisp.*;
import net.sourceforge.kleinlisp.evaluator.*;
import net.sourceforge.kleinlisp.objects.*;

/** CUP v0.11a beta 20060608 generated parser.
 * @version Sat Oct 05 15:07:57 CEST 2024
 */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {
    super();
  }

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {
    super(s);
  }

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
    super(s, sf);
  }

  /** Production table. */
  protected static final short _production_table[][] =
      unpackFromStrings(
          new String[] {
            "\000\021\000\002\002\004\000\002\007\004\000\002\007"
                + "\003\000\002\007\003\000\002\006\003\000\002\006\003"
                + "\000\002\006\003\000\002\002\003\000\002\002\003\000"
                + "\002\002\003\000\002\002\003\000\002\003\005\000\002"
                + "\003\007\000\002\003\004\000\002\004\004\000\002\004"
                + "\003\000\002\005\004"
          });

  /** Access to production table. */
  public short[][] production_table() {
    return _production_table;
  }

  /** Parse-action table. */
  protected static final short[][] _action_table =
      unpackFromStrings(
          new String[] {
            "\000\030\000\020\003\014\004\012\005\011\006\016\007"
                + "\005\014\010\015\007\001\002\000\020\002\032\004\012"
                + "\005\011\006\016\007\005\014\010\015\007\001\002\000"
                + "\020\004\012\005\011\006\016\007\005\010\022\014\010"
                + "\015\007\001\002\000\020\002\uffff\004\uffff\005\uffff\006"
                + "\uffff\007\uffff\014\uffff\015\uffff\001\002\000\024\002\ufff9"
                + "\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\013\ufff9\014"
                + "\ufff9\015\ufff9\001\002\000\024\002\ufffa\004\ufffa\005\ufffa"
                + "\006\ufffa\007\ufffa\010\ufffa\013\ufffa\014\ufffa\015\ufffa\001"
                + "\002\000\024\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8"
                + "\010\ufff8\013\ufff8\014\ufff8\015\ufff8\001\002\000\024\002"
                + "\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\013\ufff7"
                + "\014\ufff7\015\ufff7\001\002\000\024\002\ufffd\004\ufffd\005"
                + "\ufffd\006\ufffd\007\ufffd\010\ufffd\013\ufffd\014\ufffd\015\ufffd"
                + "\001\002\000\020\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007"
                + "\ufffe\014\ufffe\015\ufffe\001\002\000\024\002\ufffc\004\ufffc"
                + "\005\ufffc\006\ufffc\007\ufffc\010\ufffc\013\ufffc\014\ufffc\015"
                + "\ufffc\001\002\000\016\004\012\005\011\006\016\007\005"
                + "\014\010\015\007\001\002\000\024\002\ufffb\004\ufffb\005"
                + "\ufffb\006\ufffb\007\ufffb\010\ufffb\013\ufffb\014\ufffb\015\ufffb"
                + "\001\002\000\024\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007"
                + "\ufff1\010\ufff1\013\ufff1\014\ufff1\015\ufff1\001\002\000\022"
                + "\004\012\005\011\006\016\007\005\010\ufff2\013\ufff2\014"
                + "\010\015\007\001\002\000\024\002\ufff4\004\ufff4\005\ufff4"
                + "\006\ufff4\007\ufff4\010\ufff4\013\ufff4\014\ufff4\015\ufff4\001"
                + "\002\000\006\010\024\013\025\001\002\000\024\002\ufff6"
                + "\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\013\ufff6\014"
                + "\ufff6\015\ufff6\001\002\000\016\004\012\005\011\006\016"
                + "\007\005\014\010\015\007\001\002\000\004\010\027\001"
                + "\002\000\024\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5"
                + "\010\ufff5\013\ufff5\014\ufff5\015\ufff5\001\002\000\006\010"
                + "\ufff3\013\ufff3\001\002\000\020\002\000\004\000\005\000"
                + "\006\000\007\000\014\000\015\000\001\002\000\004\002"
                + "\001\001\002"
          });

  /** Access to parse-action table. */
  public short[][] action_table() {
    return _action_table;
  }

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table =
      unpackFromStrings(
          new String[] {
            "\000\030\000\014\002\012\003\014\005\016\006\005\007"
                + "\003\001\001\000\012\002\012\003\014\005\016\006\030"
                + "\001\001\000\014\002\012\003\014\004\022\005\016\006"
                + "\020\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\012\002\012"
                + "\003\014\005\016\006\017\001\001\000\002\001\001\000"
                + "\002\001\001\000\014\002\012\003\014\004\027\005\016"
                + "\006\020\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\012\002\012\003\014\005\016\006\025"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001"
          });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {
    return _reduce_table;
  }

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions() {
    action_obj = new CUP$parser$actions(this);
  }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
      int act_num, java_cup.runtime.lr_parser parser, java.util.Stack stack, int top)
      throws java.lang.Exception {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {
    return 0;
  }

  /** Indicates start production. */
  public int start_production() {
    return 0;
  }

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {
    return 0;
  }

  /** <code>error</code> Symbol index. */
  public int error_sym() {
    return 1;
  }

  private LispEnvironment environment;
  private Consumer<LispObject> consumer = obj -> {};
  private String sourceFile = "";

  public parser withEnvironment(LispEnvironment environment) {
    this.environment = environment;
    return this;
  }

  public parser withSourceFile(String sourceFile) {
    this.sourceFile = sourceFile;
    return this;
  }

  public parser withConsumer(Consumer<LispObject> consumer) {
    this.consumer = consumer;
    return this;
  }

  public LispEnvironment environment() {
    return environment;
  }

  public void accept(LispObject obj) {
    consumer.accept(obj);
  }

  public void syntaxError(Object e, int line, int col) {
    throw new SyntaxError(line, col);
  }

  public String getSourceFile() {
    return sourceFile;
  }
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
      int CUP$parser$act_num,
      java_cup.runtime.lr_parser CUP$parser$parser,
      java.util.Stack CUP$parser$stack,
      int CUP$parser$top)
      throws java.lang.Exception {
    /* Symbol object for return from actions */
    java_cup.runtime.Symbol CUP$parser$result;

    /* select the action based on the action number */
    switch (CUP$parser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
      case 16: // quoted_form ::= QUOTE form
        {
          LispObject RESULT = null;
          int fleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int fright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          LispObject f = (LispObject) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          RESULT =
              new ListObject(
                  parser.environment().atomOf("quote"), new ListObject(f, ListObject.NIL));
          CUP$parser$result =
              parser
                  .getSymbolFactory()
                  .newSymbol(
                      "quoted_form",
                      3,
                      ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)),
                      ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                      RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
      case 15: // form_list ::= form
        {
          LispObject RESULT = null;
          int headleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int headright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          LispObject head = (LispObject) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          RESULT = new ListObject(head, ListObject.NIL);
          CUP$parser$result =
              parser
                  .getSymbolFactory()
                  .newSymbol(
                      "form_list",
                      2,
                      ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                      ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                      RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
      case 14: // form_list ::= form form_list
        {
          LispObject RESULT = null;
          int headleft =
              ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
          int headright =
              ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
          LispObject head =
              (LispObject)
                  ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
          int tailleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int tailright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          LispObject tail = (LispObject) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          RESULT = new ListObject(head, tail);
          CUP$parser$result =
              parser
                  .getSymbolFactory()
                  .newSymbol(
                      "form_list",
                      2,
                      ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)),
                      ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                      RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
      case 13: // list_form ::= OPEN_PAR CLOSE_PAR
        {
          LispObject RESULT = null;
          RESULT = ListObject.NIL;
          CUP$parser$result =
              parser
                  .getSymbolFactory()
                  .newSymbol(
                      "list_form",
                      1,
                      ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)),
                      ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                      RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
      case 12: // list_form ::= OPEN_PAR form_list DOT form CLOSE_PAR
        {
          LispObject RESULT = null;
          int lleft =
              ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
          int lright =
              ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
          LispObject l =
              (LispObject)
                  ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
          int lastleft =
              ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
          int lastright =
              ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
          LispObject last =
              (LispObject)
                  ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
          ((ListObject) l).last().setTail(last);
          RESULT = l;
          CUP$parser$result =
              parser
                  .getSymbolFactory()
                  .newSymbol(
                      "list_form",
                      1,
                      ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)),
                      ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                      RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
      case 11: // list_form ::= OPEN_PAR form_list CLOSE_PAR
        {
          LispObject RESULT = null;
          int lleft =
              ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
          int lright =
              ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
          LispObject l =
              (LispObject)
                  ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
          RESULT = l;
          CUP$parser$result =
              parser
                  .getSymbolFactory()
                  .newSymbol(
                      "list_form",
                      1,
                      ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)),
                      ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                      RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
      case 10: // self_evaluating_form ::= ATOM
        {
          LispObject RESULT = null;
          int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

          AtomObject atom = parser.environment().atomOf(a);
          String source = parser.getSourceFile();
          RESULT = new IdentifierObject(atom, source, aleft, aright);

          CUP$parser$result =
              parser
                  .getSymbolFactory()
                  .newSymbol(
                      "self_evaluating_form",
                      0,
                      ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                      ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                      RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
      case 9: // self_evaluating_form ::= STRING_LITERAL
        {
          LispObject RESULT = null;
          int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int sright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          RESULT = new StringObject(s);
          CUP$parser$result =
              parser
                  .getSymbolFactory()
                  .newSymbol(
                      "self_evaluating_form",
                      0,
                      ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                      ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                      RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
      case 8: // self_evaluating_form ::= DOUBLE_LITERAL
        {
          LispObject RESULT = null;
          int dleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int dright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          Double d = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          RESULT = new DoubleObject(d);
          CUP$parser$result =
              parser
                  .getSymbolFactory()
                  .newSymbol(
                      "self_evaluating_form",
                      0,
                      ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                      ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                      RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
      case 7: // self_evaluating_form ::= INT_LITERAL
        {
          LispObject RESULT = null;
          int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int iright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          RESULT = new IntObject(i);
          CUP$parser$result =
              parser
                  .getSymbolFactory()
                  .newSymbol(
                      "self_evaluating_form",
                      0,
                      ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                      ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                      RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
      case 6: // form ::= quoted_form
        {
          LispObject RESULT = null;
          int fleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int fright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          LispObject f = (LispObject) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          RESULT = f;
          CUP$parser$result =
              parser
                  .getSymbolFactory()
                  .newSymbol(
                      "form",
                      4,
                      ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                      ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                      RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
      case 5: // form ::= list_form
        {
          LispObject RESULT = null;
          int fleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int fright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          LispObject f = (LispObject) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          RESULT = f;
          CUP$parser$result =
              parser
                  .getSymbolFactory()
                  .newSymbol(
                      "form",
                      4,
                      ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                      ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                      RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
      case 4: // form ::= self_evaluating_form
        {
          LispObject RESULT = null;
          int fleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int fright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          LispObject f = (LispObject) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          RESULT = f;
          CUP$parser$result =
              parser
                  .getSymbolFactory()
                  .newSymbol(
                      "form",
                      4,
                      ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                      ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                      RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
      case 3: // forms ::= error
        {
          Object RESULT = null;
          int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          Object e = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          parser.syntaxError(e, eleft, eright);
          CUP$parser$result =
              parser
                  .getSymbolFactory()
                  .newSymbol(
                      "forms",
                      5,
                      ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                      ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                      RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
      case 2: // forms ::= form
        {
          Object RESULT = null;
          int fleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int fright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          LispObject f = (LispObject) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          parser.accept(f);
          CUP$parser$result =
              parser
                  .getSymbolFactory()
                  .newSymbol(
                      "forms",
                      5,
                      ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                      ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                      RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
      case 1: // forms ::= forms form
        {
          Object RESULT = null;
          int fsleft =
              ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
          int fsright =
              ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
          Object fs =
              (Object)
                  ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
          int fleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
          int fright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
          LispObject f = (LispObject) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          parser.accept(f);
          CUP$parser$result =
              parser
                  .getSymbolFactory()
                  .newSymbol(
                      "forms",
                      5,
                      ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)),
                      ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                      RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
      case 0: // $START ::= forms EOF
        {
          Object RESULT = null;
          int start_valleft =
              ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
          int start_valright =
              ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
          Object start_val =
              (Object)
                  ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
          RESULT = start_val;
          CUP$parser$result =
              parser
                  .getSymbolFactory()
                  .newSymbol(
                      "$START",
                      0,
                      ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)),
                      ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                      RESULT);
        }
        /* ACCEPT */
        CUP$parser$parser.done_parsing();
        return CUP$parser$result;

        /* . . . . . .*/
      default:
        throw new Exception("Invalid action number found in internal parse table");
    }
  }
}
