
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Oct 11 10:17:54 CEST 2018
//----------------------------------------------------

package net.sourceforge.kleinlisp.parser;

import net.sourceforge.kleinlisp.forms.IntForm;
import net.sourceforge.kleinlisp.forms.DoubleForm;
import net.sourceforge.kleinlisp.Environment;
import net.sourceforge.kleinlisp.forms.AtomForm;
import net.sourceforge.kleinlisp.Form;
import net.sourceforge.kleinlisp.forms.StringForm;
import net.sourceforge.kleinlisp.forms.ListForm;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Oct 11 10:17:54 CEST 2018
  */
public class parser extends net.sourceforge.kleinlisp.parser.java_cup.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(net.sourceforge.kleinlisp.parser.java_cup.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(net.sourceforge.kleinlisp.parser.java_cup.Scanner s, net.sourceforge.kleinlisp.parser.java_cup.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\016\000\002\002\004\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\003\005\000" +
    "\002\003\005\000\002\003\004\000\002\004\004\000\002" +
    "\004\003\000\002\005\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\025\000\020\004\011\005\010\006\015\007\004\011" +
    "\012\013\007\014\006\001\002\000\022\004\011\005\010" +
    "\006\015\007\004\010\025\011\012\013\007\014\006\001" +
    "\002\000\004\002\024\001\002\000\026\002\ufffc\004\ufffc" +
    "\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013" +
    "\ufffc\014\ufffc\001\002\000\026\002\ufffd\004\ufffd\005\ufffd" +
    "\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014" +
    "\ufffd\001\002\000\026\002\ufffb\004\ufffb\005\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\001" +
    "\002\000\026\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa" +
    "\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\001\002\000" +
    "\020\004\011\005\010\006\015\007\004\011\012\013\007" +
    "\014\006\001\002\000\026\002\000\004\000\005\000\006" +
    "\000\007\000\010\000\011\000\012\000\013\000\014\000" +
    "\001\002\000\026\002\uffff\004\uffff\005\uffff\006\uffff\007" +
    "\uffff\010\uffff\011\uffff\012\uffff\013\uffff\014\uffff\001\002" +
    "\000\020\004\011\005\010\006\015\007\004\011\012\013" +
    "\007\014\006\001\002\000\026\002\ufffe\004\ufffe\005\ufffe" +
    "\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\014" +
    "\ufffe\001\002\000\026\002\ufff4\004\ufff4\005\ufff4\006\ufff4" +
    "\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\001" +
    "\002\000\024\004\011\005\010\006\015\007\004\010\ufff5" +
    "\011\012\012\ufff5\013\007\014\006\001\002\000\004\012" +
    "\022\001\002\000\026\002\ufff8\004\ufff8\005\ufff8\006\ufff8" +
    "\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\001" +
    "\002\000\006\010\ufff6\012\ufff6\001\002\000\004\002\001" +
    "\001\002\000\026\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\001\002" +
    "\000\004\010\027\001\002\000\026\002\ufff9\004\ufff9\005" +
    "\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9" +
    "\014\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\025\000\012\002\012\003\013\005\015\006\004\001" +
    "\001\000\014\002\012\003\013\004\025\005\015\006\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\002\012" +
    "\003\013\004\020\005\015\006\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\002\012\003\013\005\015" +
    "\006\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\002\012\003\013\004\022\005\015\006\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public net.sourceforge.kleinlisp.parser.java_cup.Symbol do_action(
    int                        act_num,
    net.sourceforge.kleinlisp.parser.java_cup.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Environment environment;

    public parser withEnvironment(Environment environment){
        this.environment = environment;
        return this;
    }

    public Environment environment(){
        return environment;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final net.sourceforge.kleinlisp.parser.java_cup.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    net.sourceforge.kleinlisp.parser.java_cup.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
        net.sourceforge.kleinlisp.parser.java_cup.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // quoted_form ::= QUOTE form 
            {
              Form RESULT =null;
		int fleft = ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()).right;
		Form f = (Form)((net.sourceforge.kleinlisp.parser.java_cup.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListForm( new AtomForm("quote"),
        new ListForm(f, ListForm.NIL, parser.environment())
        , parser.environment()  );
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("quoted_form",3, ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // form_list ::= form 
            {
              Form RESULT =null;
		int headleft = ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()).left;
		int headright = ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()).right;
		Form head = (Form)((net.sourceforge.kleinlisp.parser.java_cup.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListForm( head, ListForm.NIL, parser.environment() ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_list",2, ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()), ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // form_list ::= form form_list 
            {
              Form RESULT =null;
		int headleft = ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int headright = ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Form head = (Form)((net.sourceforge.kleinlisp.parser.java_cup.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tailleft = ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()).left;
		int tailright = ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()).right;
		Form tail = (Form)((net.sourceforge.kleinlisp.parser.java_cup.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListForm( head, tail, parser.environment() );         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_list",2, ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // list_form ::= OPEN_PAR CLOSE_PAR 
            {
              Form RESULT =null;
		 RESULT = ListForm.NIL;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_form",1, ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // list_form ::= OPEN_BRACKET form_list CLOSE_BRACKET 
            {
              Form RESULT =null;
		int lleft = ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Form l = (Form)((net.sourceforge.kleinlisp.parser.java_cup.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ListForm( new AtomForm("list"), l, parser.environment()  ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_form",1, ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // list_form ::= OPEN_PAR form_list CLOSE_PAR 
            {
              Form RESULT =null;
		int lleft = ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Form l = (Form)((net.sourceforge.kleinlisp.parser.java_cup.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_form",1, ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // self_evaluating_form ::= ATOM 
            {
              Form RESULT =null;
		int aleft = ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((net.sourceforge.kleinlisp.parser.java_cup.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AtomForm(a);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("self_evaluating_form",0, ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()), ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // self_evaluating_form ::= STRING_LITERAL 
            {
              Form RESULT =null;
		int sleft = ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((net.sourceforge.kleinlisp.parser.java_cup.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringForm(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("self_evaluating_form",0, ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()), ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // self_evaluating_form ::= DOUBLE_LITERAL 
            {
              Form RESULT =null;
		int dleft = ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()).right;
		Double d = (Double)((net.sourceforge.kleinlisp.parser.java_cup.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DoubleForm(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("self_evaluating_form",0, ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()), ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // self_evaluating_form ::= INT_LITERAL 
            {
              Form RESULT =null;
		int ileft = ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((net.sourceforge.kleinlisp.parser.java_cup.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntForm(i);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("self_evaluating_form",0, ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()), ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // form ::= quoted_form 
            {
              Form RESULT =null;
		int fleft = ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()).right;
		Form f = (Form)((net.sourceforge.kleinlisp.parser.java_cup.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form",4, ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()), ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // form ::= list_form 
            {
              Form RESULT =null;
		int fleft = ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()).right;
		Form f = (Form)((net.sourceforge.kleinlisp.parser.java_cup.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form",4, ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()), ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // form ::= self_evaluating_form 
            {
              Form RESULT =null;
		int fleft = ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()).right;
		Form f = (Form)((net.sourceforge.kleinlisp.parser.java_cup.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form",4, ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()), ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= form EOF 
            {
              Object RESULT =null;
		int start_valleft = ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Form start_val = (Form)((net.sourceforge.kleinlisp.parser.java_cup.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((net.sourceforge.kleinlisp.parser.java_cup.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

