package net.sourceforge.kleinlisp.parser;
    
import net.sourceforge.kleinlisp.*;
import net.sourceforge.kleinlisp.objects.*;


parser code {:
    private LispEnvironment environment;

    public parser withEnvironment(LispEnvironment environment){
        this.environment = environment;
        return this;
    }

    public LispEnvironment environment(){
        return environment;
    }
:}

terminal String ATOM;
terminal String STRING_LITERAL;
terminal QUOTE, OPEN_PAR, CLOSE_PAR, OPEN_BRACKET, CLOSE_BRACKET;
terminal DOT;

terminal Integer INT_LITERAL;
terminal Double  DOUBLE_LITERAL;

non terminal LispObject self_evaluating_form;
non terminal LispObject list_form;
non terminal LispObject form_list;
non terminal LispObject quoted_form;
non terminal LispObject form;

start with form;

form ::= 
    self_evaluating_form:f {: RESULT = f; :} |
    list_form:f {: RESULT = f; :} |
    quoted_form:f {: RESULT = f; :} ;

self_evaluating_form ::=
    INT_LITERAL:i    {: RESULT = new IntObject(i);    :} |
    DOUBLE_LITERAL:d {: RESULT = new DoubleObject(d); :} |
    STRING_LITERAL:s {: RESULT = new StringObject(s); :} |
    ATOM:a           {: 
                        AtomObject atom = parser.environment().atomOf(a); 
                        RESULT = new IdentifierObject(atom, aleft, aright);  
                     :};

list_form ::=
    OPEN_PAR     form_list:l                CLOSE_PAR     {: RESULT = l; :} |
    OPEN_PAR     form_list:l DOT form:last  CLOSE_PAR     {: ((ListObject) l).last().setTail(last); RESULT = l; :} |
    OPEN_PAR                                CLOSE_PAR     {: RESULT = ListObject.NIL;  :};

form_list ::= 
    form:head form_list:tail {: RESULT = new ListObject( head, tail );         :} |
    form:head                {: RESULT = new ListObject( head, ListObject.NIL ); :} |
    error:e {: parser.report_error("Syntax error, skip rest",e); :};

quoted_form ::= 
    QUOTE form:f {: RESULT = new ListObject( parser.environment().atomOf("quote"), new ListObject(f, ListObject.NIL) ); :};