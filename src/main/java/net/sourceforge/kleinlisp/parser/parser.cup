package net.sourceforge.lon.parser;

import java_cup.runtime.*;
import net.sourceforge.lon.*;


parser code {:
    private Environment environment;

    public parser withEnvironment(Environment environment){
        this.environment = environment;
        return this;
    }

    public Environment environment(){
        return environment;
    }
:}

terminal String ATOM;
terminal String STRING_LITERAL;
terminal QUOTE, OPEN_PAR, CLOSE_PAR, OPEN_BRACKET, CLOSE_BRACKET;

terminal Integer INT_LITERAL;
terminal Double  DOUBLE_LITERAL;

non terminal Form self_evaluating_form;
non terminal Form list_form;
non terminal Form form_list;
non terminal Form quoted_form;
non terminal Form form;

start with form;


form ::= 
    self_evaluating_form:f {: RESULT = f; :} |
    list_form:f {: RESULT = f; :} |
    quoted_form:f {: RESULT = f; :};

self_evaluating_form ::=
    INT_LITERAL:i    {: RESULT = new IntForm(i);    :} |
    DOUBLE_LITERAL:d {: RESULT = new DoubleForm(d); :} |
    STRING_LITERAL:s {: RESULT = new StringForm(s); :} |
    ATOM:a           {: RESULT = new AtomForm(a);   :};

list_form ::=
    OPEN_PAR     form_list:l   CLOSE_PAR     {: RESULT = l; :} |
    OPEN_BRACKET form_list:l   CLOSE_BRACKET {: RESULT = new ListForm( new AtomForm("list"), l, parser.environment()  ); :} |
    OPEN_PAR                   CLOSE_PAR     {: RESULT = ListForm.NIL;  :};

form_list ::= 
    form:head form_list:tail {: RESULT = new ListForm( head, tail, parser.environment() );         :} |
    form:head                {: RESULT = new ListForm( head, ListForm.NIL, parser.environment() ); :};

quoted_form ::= 
    QUOTE form:f {: RESULT = new ListForm( new AtomForm("quote"),
        new ListForm(f, ListForm.NIL, parser.environment())
        , parser.environment()  );
    :};